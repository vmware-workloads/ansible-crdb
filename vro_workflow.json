{
  "display-name": "Add a PTP device",
  "description": "Adds a virtual PTP dev to a virtual machine.",
  "position": {
    "y": 1400,
    "x": 0
  },
  "input": {
    "param": [
      {
        "name": "vm",
        "type": "string"
      }
    ]
  },
  "output": {
    "param": [
      {
        "name": "output",
        "type": "VC:VirtualMachine"
      }
    ]
  },
  "attrib": [
    {
      "description": "Found ptp device?",
      "value": {
        "boolean": {
          "value": false
        }
      },
      "type": "boolean",
      "name": "ptpFound"
    },
    {
      "description": "Task to await",
      "type": "VC:Task",
      "name": "task"
    },
    {
      "description": "Log progress while waiting for the task to complete",
      "value": {
        "boolean": {
          "value": false
        }
      },
      "type": "boolean",
      "name": "progress"
    },
    {
      "description": "Polling rate for the task state, in seconds",
      "value": {
        "number": {
          "value": 1
        }
      },
      "type": "number",
      "name": "pollRate"
    },
    {
      "type": "Any",
      "name": "actionResult"
    },
    {
      "type": "VC:VirtualMachine",
      "name": "myVM"
    }
  ],
  "workflow-item": [
    {
      "display-name": "Check if ptp already exists",
      "script": {
        "value": "\n// Get the vCenter Server connection\n//var vcSdkConnection = VcPlugin.getAllSdkConnections()[0];\n//var allVMs = vcSdkConnection.getAllVirtualMachines();\n\n//var vmName = WorkflowInputItem;\n\n//System.log(vmName);\nSystem.log(vm);\n\nvar allVms = VcPlugin.getAllVirtualMachines();\n//var testName = vm.name;\nvar testName = vm;\n\n//var vmSearch = VcPlugin.getAllVirtualMachines(null, \"xpath:name='test-mcm6104-262454540043'\");\n\n\n\nfor (var i = 0; i < allVms.length; i++) {\n    if (allVms[i].name === vm) {\n        var devices = allVms[i].config.hardware.device;\n        myVM = allVms[i]\n        //System.log(allVms[i].name);\n    }\n}\n\n\nptpFound = false;\nif ( devices != null )  {\n\tfor ( ii in devices )  {\n\t\tif ( devices[ii] instanceof VcVirtualPrecisionClock )  {\n\t\t\tSystem.log( \"Found PTP\" );\n\t\t\tptpFound = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\n}\n\nif ( ptpFound == false ) {\n    // Check if the VM is powered off before upgrading\n    if (myVM.runtime.powerState == \"poweredOff\") {\n        System.log(\"Already Powered Off: \" + myVM.name);\n    } \n    else {\n        System.log(\"VM is powered on. Shutting down VM: \" + myVM.name);\n        myVM.powerOffVM_Task();\n\n        // Wait for the VM to power off before proceeding\n        System.sleep(3000)\n    }\n\n    // upgrade VM\n    System.log(\"Upgrading hardware for VM: \" + myVM.name);\n    myVM.upgradeVM_Task();\n    System.log(\"Hardware upgrade for VM \" + myVM.name + \" initiated.\");\n    \n}\n\n\n\n\n\nSystem.log(myVM.name);\nSystem.log(\"done\");\n\n\n",
        "encoded": false
      },
      "in-binding": {
        "bind": [
          {
            "name": "vm",
            "type": "string",
            "export-name": "vm"
          }
        ]
      },
      "out-binding": {
        "bind": [
          {
            "name": "ptpFound",
            "type": "boolean",
            "export-name": "ptpFound"
          },
          {
            "name": "myVM",
            "type": "VC:VirtualMachine",
            "export-name": "myVM"
          }
        ]
      },
      "position": {
        "y": 100,
        "x": 280
      },
      "name": "item4",
      "out-name": "item5",
      "type": "task",
      "comparator": 0
    },
    {
      "display-name": "ptp found ?",
      "script": {
        "value": "// Generated by the system, cannot be edited\nreturn (ptpFound === true);",
        "encoded": false
      },
      "in-binding": {
        "bind": [
          {
            "name": "cdromFound",
            "type": "boolean",
            "export-name": "ptpFound"
          }
        ]
      },
      "out-binding": {},
      "condition": [
        {
          "value": "false",
          "name": "ptpFound",
          "type": "boolean",
          "comparator": "0",
          "label": "null"
        }
      ],
      "position": {
        "y": 170,
        "x": 280
      },
      "name": "item5",
      "out-name": "item6",
      "alt-out-name": "item7",
      "type": "condition",
      "comparator": 0
    },
    {
      "display-name": "ptp found, nothing to do",
      "script": {
        "value": "Server.log( \"PTP already exists\", \"PTP already exists for VM '\" + myVM.name + \"'\" );\n\noutput = myVM;\n",
        "encoded": false
      },
      "in-binding": {
        "bind": [
          {
            "name": "myVM",
            "type": "VC:VirtualMachine",
            "export-name": "myVM"
          }
        ]
      },
      "out-binding": {
        "bind": [
          {
            "name": "output",
            "type": "VC:VirtualMachine",
            "export-name": "output"
          }
        ]
      },
      "position": {
        "y": 280,
        "x": 260
      },
      "name": "item6",
      "out-name": "item16",
      "type": "task",
      "color": "3399ffff",
      "comparator": 0
    },
    {
      "display-name": "Add PTP",
      "script": {
        "value": "var configSpec = new VcVirtualMachineConfigSpec();\nvar deviceConfigSpecs = new Array();\nvar deviceConfigSpec;\n\n\n// Connectable info for PTP\nvar connectInfo = new VcVirtualDeviceConnectInfo();\nconnectInfo.allowGuestControl = true;\nconnectInfo.connected = false;\n\n// Create ptp BackingInfo\nvar backingInfo = null;\nbackingInfo = new VcVirtualPrecisionClockSystemClockBackingInfo();\nbackingInfo.protocol = VcHostDateTimeInfoProtocol.ntp;\n\nvar ptp = new VcVirtualPrecisionClock();\nptp.backing = backingInfo;\nptp.key = -1;\nptp.connectable = connectInfo;\n\n// Create PTP ConfigSpec\nvar deviceConfigSpec = new VcVirtualDeviceConfigSpec();\ndeviceConfigSpec.device = ptp;\ndeviceConfigSpec.operation = VcVirtualDeviceConfigSpecOperation.add;\ndeviceConfigSpecs[0] = deviceConfigSpec;\n\n// List of devices\nconfigSpec.deviceChange = deviceConfigSpecs;\n\nSystem.log( \"deviceConfigSpec\" );\nSystem.log( deviceConfigSpec );\nSystem.log( \"configSpec\" );\nSystem.log( configSpec );\n\n\n\n// Launch the reconfigVM task\ntask = myVM.reconfigVM_Task( configSpec );\n",
        "encoded": false
      },
      "in-binding": {
        "bind": [
          {
            "name": "myVM",
            "type": "VC:VirtualMachine",
            "export-name": "myVM"
          }
        ]
      },
      "out-binding": {
        "bind": [
          {
            "name": "task",
            "type": "VC:Task",
            "export-name": "task"
          },
          {
            "name": "myVM",
            "type": "VC:VirtualMachine",
            "export-name": "myVM"
          }
        ]
      },
      "position": {
        "y": 180,
        "x": 400
      },
      "name": "item7",
      "out-name": "item9",
      "type": "task",
      "comparator": 0
    },
    {
      "display-name": "Success",
      "script": {
        "value": "Server.log( \"PTP successfully added\", \"PTP successfully added for VM '\" + myVM.name + \"'\" );\nptpFound = true;\n\nSystem.log(\"Powering on VM: \" + myVM.name);\nmyVM.powerOnVM_Task();\n\n\nvm_out = myVM;\n",
        "encoded": false
      },
      "in-binding": {
        "bind": [
          {
            "name": "myVM",
            "type": "VC:VirtualMachine",
            "export-name": "myVM"
          }
        ]
      },
      "out-binding": {
        "bind": [
          {
            "name": "vm_out",
            "type": "VC:VirtualMachine",
            "export-name": "output"
          }
        ]
      },
      "position": {
        "y": 280,
        "x": 460
      },
      "name": "item14",
      "out-name": "item16",
      "type": "task",
      "color": "3399ffff",
      "comparator": 0
    },
    {
      "in-binding": {},
      "out-binding": {},
      "position": {
        "y": 350,
        "x": 380
      },
      "name": "item16",
      "type": "end",
      "end-mode": "0",
      "comparator": 0
    },
    {
      "display-name": "vim3WaitTaskEnd",
      "script": {
        "value": "//Auto generated script, cannot be modified !\nactionResult = System.getModule(\"com.vmware.library.vc.basic\").vim3WaitTaskEnd(task,progress,pollRate) ;",
        "encoded": false
      },
      "in-binding": {
        "bind": [
          {
            "description": "Task to Wait for",
            "name": "task",
            "type": "VC:Task",
            "export-name": "task"
          },
          {
            "description": "Log progess while waiting for the task",
            "name": "progress",
            "type": "boolean",
            "export-name": "progress"
          },
          {
            "description": "Polling rate for the task state [seconds]",
            "name": "pollRate",
            "type": "number",
            "export-name": "pollRate"
          }
        ]
      },
      "out-binding": {
        "bind": [
          {
            "name": "actionResult",
            "type": "Any",
            "export-name": "actionResult"
          }
        ]
      },
      "description": "Wait a VIM 3 Task to end.\nWhen task ended, return the ",
      "position": {
        "y": 230,
        "x": 420
      },
      "name": "item9",
      "out-name": "item14",
      "type": "task",
      "script-module": "com.vmware.library.vc.basic/vim3WaitTaskEnd",
      "comparator": 0
    }
  ],
  "root-name": "item4",
  "object-name": "Workflow:name=generic",
  "id": "21b0e8ce-349a-40ce-840a-0f5a2df5e3de",
  "version": "0.9.6",
  "api-version": "6.0.0",
  "allowed-operations": "vef",
  "restartMode": 1,
  "resumeFromFailedMode": 0,
  "editor-version": "2.0"
}