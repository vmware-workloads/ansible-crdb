---
- name: Wait for systems to boot up
  hosts: all
  gather_facts: no
  any_errors_fatal: true
  tasks:
    - name: Wait up to 300 seconds
      wait_for_connection:
        delay: 3
        sleep: 5
        timeout: 300

- name: OS updates
  hosts: all
  gather_facts: no
  any_errors_fatal: true
  become: true
  tasks:
    - name: filter and return only selected facts
      ansible.builtin.setup:
        filter:
          - 'ansible_os_family'
          - 'ansible_distribution'
          - 'ansible_distribution_version'
          - 'ansible_distribution_major_version'

    - name: include OS specific variables.
      include_vars: "{{ ansible_os_family }}.yml"

    - name: include distribution and version-specific vars
      include_vars: "{{ item }}"
      with_first_found:
        - files:
            - "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
          skip: true

    - name: update kernel for vmw_ptp support
      ansible.builtin.apt:
        name:
          - linux-image-generic-hwe-22.04
      register: kernel_st
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

    - name: rebooting machine
      ansible.builtin.reboot:
        reboot_timeout: 300
      when: kernel_st.changed

    - name: validate ptp0 exist
      ansible.builtin.stat:
        path: "{{ ptp_device }}"
      register: stat_st

    - name: Fail if the ptp device does not exist
      ansible.builtin.fail:
        msg: "PTP device does not exist: {{ ptp_device }"
      when: not stat_st.stat.exists

- name: Deploy CockroachDB
  hosts: all
  tasks:
    - name: configure limits.conf
      ansible.builtin.blockinfile:
        path: /etc/security/limits.conf
        insertafter: EOF
        block: |
          *              soft     nofile          65536
          *              hard     nofile          65536
      register: limits_conf_st

    - name: rebooting machine
      ansible.builtin.reboot:
        reboot_timeout: 300
      when: limits_conf_st.changed

    - name: install chrony (ubuntu/debian)
      ansible.builtin.apt:
        name:
          - chrony
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

    - name: create chrony configuration
      ansible.builtin.template:
        src: "{{ chrony_conf_template }}"
        dest: "{{ chrony_conf_file }}"
        owner: root
        group: root
        mode: 0644
      register: chrony_st
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

    - name: restart chrony
      ansible.builtin.systemd:
        name: "{{ chrony_service }}"
        enabled: yes
        state: restarted
        masked: no
      when: chrony_st.changed

    - name: start and enable the chrony service
      ansible.builtin.systemd:
        name: "{{ chrony_service }}"
        enabled: yes
        state: started
        masked: no
        daemon_reload: yes
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

    - name: download and extract Cockroach DB executable
      ansible.builtin.unarchive:
        src: "{{ crdb_url }}"
        dest: /opt/
        remote_src: yes

    - name: get cockroach version
      ansible.builtin.set_fact:
        crdb_version: "{{ ((crdb_url | basename) | splitext)[0] }}"

    - name: print cockroach Version
      ansible.builtin.debug:
        var: crdb_version

    - name: create cockroach folder symlink
      file:
        src: /opt/{{ crdb_version }}
        dest: /opt/cockroach-current
        state: link
      register: folder_symlink

    - name: create cockroach binary symlink
      file:
        src: /opt/cockroach-current/cockroach
        dest: "{{ crdb_executable }}"
        state: link

