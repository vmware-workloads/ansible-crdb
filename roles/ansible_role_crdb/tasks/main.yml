- name: include OS specific variables.
  include_vars: "{{ ansible_os_family }}.yml"

- name: generate hosts file
  ansible.builtin.include_tasks: ansible_task_create_hosts_file.yml
  when: (use_hosts_file | default(os_create_hosts_file) | bool)

- name: configure os parameters
  ansible.builtin.include_tasks: ansible_task_configure_os.yml

- name: configure firewall
  ansible.builtin.include_tasks: ansible_task_configure_firewall.yml

- name: install cockroach executable
  ansible.builtin.include_tasks: ansible_task_install_cockroach_executable.yml

- name: "create cockroach folder {{ crdb_folder }}"
  ansible.builtin.file:
    path: "{{ crdb_folder }}"
    state: directory
    owner: "{{ crdb_service_user }}"

- name: "create cockroach certificate folder {{ crdb_cert_folder }}"
  ansible.builtin.file:
    path: "{{ crdb_cert_folder }}"
    state: directory
    owner: "{{ crdb_service_user }}"

- name: generate SSL certificates
  ansible.builtin.include_tasks: ansible_task_generate_ssl_certificates.yml

###
- name: set ptp device permissions
  ansible.builtin.file:
    path: "{{ crdb_ptp_dev }}"
    mode: '0644'
  when: crdb_ptp

- name: get data volumes
  set_fact:
    crdb_data_disks: "{{ ansible_mounts | json_query('[].mount') | map('regex_search', '/var/lib/cockroach/data[0-9]*') | select('string') | list }}"
  when: crdb_data_disks | length < 1

- name: list data volumes
  debug:
    var: crdb_data_disks

- name: set data volume permissions
  ansible.builtin.file:
    path: "{{ item }}"
    owner: "{{ crdb_service_user }}"
    group: "{{ crdb_service_group }}"
  loop: "{{ crdb_data_disks }}"

- name: create bootstrap server list
  set_fact:
    bootstrap: "{{ play_hosts[:3] }}"

- name: bootstrap servers
  debug:
    var: bootstrap

- name: create cockroachdb.service
  ansible.builtin.template:
    src: "{{ crdb_service_template }}"
    dest: "/lib/systemd/system/{{ crdb_service }}.service"
    mode: '0644'
  register: cockroach_systemd_service

- name: start and enable the first server
  ansible.builtin.systemd:
    name: "{{ crdb_service }}"
    enabled: yes
    state: started
    masked: no
  when: inventory_hostname == play_hosts[0]

- name: Pause for 15 seconds to let the server start
  ansible.builtin.pause:
    seconds: 15

- name: check if the database is initialized
  ansible.builtin.shell:
    cmd: >
      cockroach sql 
      --certs-dir=certs 
      --host=localhost:{{ crdb_sql_port }}
      --execute 'select 1'
  register: running_st
  changed_when: false
  failed_when: running_st.rc != 1 and running_st.rc != 0
  when: inventory_hostname == play_hosts[0]

- name: initialize the database
  ansible.builtin.shell:
    cmd: >
      cockroach init 
      --certs-dir=/var/lib/cockroach/certs
      --host={{ play_hosts[0] }}:{{ crdb_rpc_port }}
  register: result
  failed_when: result.rc != 0 and 'cluster has already been initialized' not in result.stderr and 'unable to bootstrap due to internal error' not in result.stderr
  when: (inventory_hostname == play_hosts[0]) and (running_st.rc != 0)

- name: "create default user ({{ crdb_default_db_user }}/{{ crdb_default_db_password }})"
  ansible.builtin.shell:
    cmd: >
      cockroach sql 
      --certs-dir=certs 
      --host={{ play_hosts[0] }}:{{ crdb_sql_port }}
      --execute 'CREATE USER IF NOT EXISTS {{ crdb_default_db_user }} WITH PASSWORD '{{ crdb_default_db_password }}'
  when: inventory_hostname == play_hosts[0]

- name: grant admin to user cockroach
  ansible.builtin.shell:
    cmd: >
      cockroach sql 
      --certs-dir=certs 
      --host={{ play_hosts[0] }}:{{ crdb_sql_port }}
      --execute 'GRANT admin TO {{ crdb_default_db_user }}'
  when: inventory_hostname == play_hosts[0]

- name: start and enable the remaining bootstrap servers
  ansible.builtin.systemd:
    name: "{{ crdb_service }}"
    enabled: yes
    state: started
    masked: no
  when: inventory_hostname in play_hosts[1:]
