#
# Ref. https://www.cockroachlabs.com/docs/stable/deploy-cockroachdb-on-premises
#
- name: print inventory name
  ansible.builtin.debug:
    var: inventory_hostname

- name: print play host 0
  ansible.builtin.debug:
    var: play_hosts[0]

- name: set variables
  ansible.builtin.set_fact:
    certs_folder: certs
    safe_folder: my-safe-directory
    ca_crt: ca.crt
    ca_key: ca.key
    crdb_lb_items: "{{ ( crdb_lb_ip | default([]) ) + ( crdb_lb_hostnames | default([]) ) }}"

- name: "create base directory '{{ crdb_folder }}' if it does not exist"
  ansible.builtin.file:
    path: "{{ crdb_folder }}"
    state: directory
    mode: "0755"

- name: create certificate directories if they do not exist
  ansible.builtin.file:
    path: "{{ crdb_folder }}/{{ item }}"
    state: directory
    mode: "0755"
  loop:
    - "{{ certs_folder }}"
    - "{{ safe_folder }}"

- name: check if ca.crt exists
  ansible.builtin.stat:
    path: "{{ crdb_folder }}/{{ certs_folder }}/{{ ca_crt }}"
  register: ca_crt_stat

- name: check if ca.key exists
  ansible.builtin.stat:
    path: "{{ crdb_folder }}/{{ safe_folder }}/{{ ca_key }}"
  register: ca_key_stat

- name: check if root certificate needs to be generated
  ansible.builtin.set_fact:
    generate_ca_certs: "{{ (not (ca_crt_stat.stat.exists and ca_key_stat.stat.exists)) | bool }}"

- set_fact:
    generate_ca_certs: true

- name: debug
  ansible.builtin.debug:
    var: generate_ca_certs

- name: generate CA certificate and key on first node
  ansible.builtin.shell:
    cmd: >
      cockroach cert create-ca 
      --certs-dir={{ crdb_folder }}/{{ certs_folder }}/ 
      --ca-key={{ crdb_folder }}/{{ safe_folder }}/{{ ca_key }}
      --overwrite
      --allow-ca-key-reuse
  when:
    - generate_ca_certs
    - inventory_hostname == play_hosts[0]

- name: synchronization of src on the inventory host to the dest on the localhost in pull mode
  ansible.posix.synchronize:
    mode: pull
    dirs: yes
    src: "{{ item }}"
    dest: "certificates"
  with_items:
    - "{{ crdb_folder }}/{{ certs_folder }}/"
    - "{{ crdb_folder }}/{{ safe_folder }}/"
  when:
    - generate_ca_certs
    - inventory_hostname == play_hosts[0]

- name: Copy file with owner and permissions
  ansible.builtin.copy:
    src:  "certificates/"
    dest: "{{ crdb_folder }}"
    owner: "{{ crdb_service_user }}"
    mode: '0600'
  when:
    - generate_ca_certs
    - inventory_hostname != play_hosts[0]

#- name: "copy '{{ ca_crt }}' to ansible runner"
#  ansible.builtin.copy:
#    remote_src: true
#    src: "{{ crdb_folder }}/{{ certs_folder }}/{{ ca_crt }}"
#    dest: /
#  when:
#    - generate_ca_certs
#    - inventory_hostname == play_hosts[0]
#
#- name: "copy '{{ ca_key }}' to ansible runner"
#  ansible.builtin.copy:
#    remote_src: true
#    src: "{{ crdb_folder }}/{{ safe_folder }}/{{ ca_key }}"
#    dest: /
#  register: foo
#  when:
#    - generate_ca_certs
#    - inventory_hostname == play_hosts[0]
#
#- name: "copy '{{ ca_crt }}' to other hosts"
#  ansible.builtin.copy:
#    src: "/{{ ca_crt }}"
#    dest: "{{ crdb_folder }}/{{ certs_folder }}/{{ ca_crt }}"
#  when:
#    - generate_ca_certs
#    - inventory_hostname != play_hosts[0]


#- name: copy CA certificate to ansible host
#  ansible.builtin.copy:
#    remote_src: true
#    src: certs/ca.crt
#    dest: "certs/{{ item }}/ca.crt"
#  with_items: "{{ play_hosts }}"
#  when: inventory_hostname == play_hosts[0]
#
#- name: synchronize ca certs on first node to localhost
#  ansible.posix.synchronize:
#    mode: pull
#    dirs: yes
#    src: "{{ item }}"
#    dest: "certificates"
#  with_items:
#    - "{{ crdb_folder }}/{{ certs_folder }}/{{ ca_crt }}"
#    - "{{ crdb_folder }}/{{ safe_folder }}/{{ ca_key }}"
#  when:
#    - generate_ca_certs
#    - inventory_hostname == play_hosts[0]
#
#- name: synchronize ca certs on first node to localhost
#  ansible.posix.synchronize:
#    mode: pull
#    dirs: yes
#    src: "certificates/{{ item }}"
#    dest: "{{ item }}"
#  with_items:
#    - "{{ crdb_folder }}/{{ certs_folder }}/{{ ca_crt }}"
#    - "{{ crdb_folder }}/{{ safe_folder }}/{{ ca_key }}"
#  when:
#    - generate_ca_certs
#    - inventory_hostname != play_hosts[0]
#
