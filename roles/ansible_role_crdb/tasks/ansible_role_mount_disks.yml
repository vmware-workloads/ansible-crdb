- name: gather hardware facts
  ansible.builtin.setup:
    gather_subset:
      - hardware

- name: get disks (/dev/sd*) except sda (OS)
  ansible.builtin.set_fact:
    disks: "{{ disks|default([]) + [ '/dev/' ~ item ] }}"
  loop: "{{ hostvars[inventory_hostname].ansible_devices.keys() | map('regex_search', '/dev/sd(?!a)\w+') | select('string') | list | sort }}"

- name: list disks
  ansible.builtin.debug:
    var: disks

- name: get mounted devices
  ansible.builtin.set_fact:
    mounted_disks: "{{ ansible_mounts|json_query('[].device') }}"

- name: list mounted disks
  ansible.builtin.debug:
    var: mounted_disks

- name: partition disks
  community.general.parted:
    device: "{{ item }}"
    number: 1
    state: present
  when: "{{item}}1" not in mounted_disks
  loop: "{{ disks }}"

- name: create filesystem
  community.general.filesystem:
    fstype: "{{ data_filesystem }}"
    dev: "{{ item }}1"
    force: true
  when: "{{item}}1" not in mounted_disks
  loop: "{{ disks }}"

- name: mount data volumes
  ansible.posix.mount:
    src: "{{ item }}1"
    path: "/{{ crdb_folder }}/data{{ my_index }}"
    opts: defaults
    state: mounted
    fstype: "{{ data_filesystem }}"
  when: "{{item}}1" not in mounted_disks
  loop: "{{ vars.disks }}"
  loop_control:
    index_var: my_index

- name: get data volumes
  ansible.builtin.set_fact:
    crdb_data_disks: "{{ ansible_mounts | json_query('[].mount') | map('regex_search', '/var/lib/cockroach/data[0-9]*') | select('string') | list }}"
  when: crdb_data_disks | length < 1

- name: list data volumes
  ansible.builtin.debug:
    var: crdb_data_disks

- name: set data volume permissions
  ansible.builtin.file:
    path: "{{ item }}"
    owner: "{{ crdb_service_user }}"
    group: "{{ crdb_service_group }}"
  loop: "{{ crdb_data_disks }}"

