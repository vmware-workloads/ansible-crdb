- name: gather hardware facts
  ansible.builtin.setup:
    gather_subset:
      - hardware


#
# Use lsblk to query disk devices and output in json to a variable
#

- name: Get block devices without filesystem, mountpoints, or children
  ansible.builtin.command: lsblk --fs -I8 --json
  register: lsblk_output

#
# Filter the lsblk output to find unused devices
# 

- name: Filter block devices using json_query
  set_fact:
    unused_disks: "{{ lsblk_output.stdout | from_json | json_query(query) }}"
  vars:
    query: "blockdevices[?children==null && fstype==null && mountpoints==[null]].name"

- name: Display unformatted devices
  debug:
    var: unused_disks

#
# Create a dictionary of disk names, e.g. data0 | sda
# note that disk_names is an inventory variable that
# is passed down from vcf automation (aria)
# 

- name: Create map of disk names to disks
  set_fact:
    disk_name_map: "{{ dict(disk_names | zip(unused_disks)) }}"    

- name: Display the map of disk names to disks
  debug:
    var: disk_name_map    


#
# Create exacly one partition and name each disk from the vcf automation
# inputs
#    

- name: partition disks
  community.general.parted:
    device: "/dev/{{ item.value }}"
    number: 1
    state: present
    label: gpt
    name: "{{ item.key }}"
    resize: true
  loop: "{{ disk_name_map | dict2items }}"
  loop_control:
    index_var: index
  register: partition_result

- name: Display partition result
  debug:
    var: partition_result  


#- name: Filter partitions using json_query
#  set_fact:
#    partitioned_disks: "{{ partition_result | json_query(query) }}"
#  vars:
#    query: "results[].{dev: disk.dev, num: partitions[].num}"
  

#- name: Display the formatted partition names
#  debug:
#    var: partitioned_disks


#
# Create the filesystem on the found disks from
# earier. We know we have only one partition so
# devices resolve to, for instance, /dev/sdb1
#

- name: create filesystem
  community.general.filesystem:
    fstype: "{{ data_filesystem }}"
    dev: "/dev/{{ item }}1"
  loop: "{{ unused_disks }}"


#
# Mount the new disks, to the same path as the 
# disk name (as specified in vcf automation)
#

- name: mount data volumes
  ansible.posix.mount:
    src: "/dev/{{ item.value }}1"
    path: "{{ crdb_folder }}/{{ item.key }}"
    opts: defaults
    state: mounted
    fstype: "{{ data_filesystem }}"
  loop: "{{ disk_name_map | dict2items }}"
  loop_control:
    index_var: index

- name: get data volumes
  ignore_errors: true
  ansible.builtin.shell:
    cmd: >
      lsblk --list --noheadings --output MOUNTPOINT
      | grep -i {{ crdb_folder }}
  register: mounted_data_disks

- name: set data disk variable
  ansible.builtin.set_fact:
    crdb_data_disks: "{{ mounted_data_disks.stdout }}"

- name: list mounted data disks
  ansible.builtin.debug:
    var: "{{ crdb_data_disks }}"
